
/* Copyright 2020 Herve Marchand
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef MATRIC_TEXT_SCROWLER_h
#define MATRIC_TEXT_SCROWLER_h

#if (ARDUINO >= 100)
#include <Arduino.h>
#else
#include <WProgram.h>
#endif

class MatrixTextScrollerClass {
    private:

      unsigned char matrixCharSet[107][8] = {
        {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // Space - Ascii 32
        {0x00,0x10,0x10,0x10,0x10,0x00,0x10,0x00},   // !
        {0x00,0x24,0x24,0x00,0x00,0x00,0x00,0x00},   // ”
        {0x00,0x24,0x7E,0x24,0x24,0x7E,0x24,0x00},   // #
        {0x00,0x08,0x3E,0x28,0x3E,0x0A,0x3E,0x8},    // $
        {0x00,0x62,0x64,0x08,0x10,0x26,0x46,0x00},   // %
        {0x00,0x10,0x28,0x10,0x2A,0x44,0x3A,0x00},   // &
        {0x00,0x08,0x10,0x00,0x00,0x00,0x00,0x00},   // ‘
        {0x00,0x04,0x08,0x08,0x08,0x08,0x04,0x00},   // (
        {0x00,0x20,0x10,0x10,0x10,0x10,0x20,0x00},   // )
        {0x00,0x00,0x14,0x08,0x3E,0x08,0x14,0x00},   // *
        {0x00,0x00,0x08,0x08,0x3E,0x08,0x08,0x00},   // +
        {0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x10},   // ,
        {0x00,0x00,0x00,0x00,0x3E,0x00,0x00,0x00},   // -
        {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00},   // .
        {0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x00},   // /
        {0x00,0x3C,0x46,0x4A,0x52,0x62,0x3C,0x00},   // 0 - Ascii 48
        {0x00,0x30,0x50,0x10,0x10,0x10,0x7C,0x00},   // 1
        {0x00,0x3C,0x42,0x02,0x3C,0x40,0x7E,0x00},   // 2
        {0x00,0x3C,0x42,0x0C,0x02,0x42,0x3C,0x00},   // 3
        {0x00,0x08,0x18,0x28,0x48,0x7E,0x08,0x00},   // 4
        {0x00,0x7E,0x40,0x7C,0x02,0x42,0x3C,0x00},   // 5
        {0x00,0x3C,0x40,0x7C,0x42,0x42,0x3C,0x00},   // 6
        {0x00,0x7E,0x02,0x04,0x08,0x10,0x10,0x00},   // 7
        {0x00,0x3C,0x42,0x3C,0x42,0x42,0x3C,0x00},   // 8
        {0x00,0x3C,0x42,0x42,0x3E,0x02,0x3C,0x00},   // 9
        {0x00,0x00,0x10,0x00,0x00,0x00,0x10,0x00},   // : - Ascii 58
        {0x00,0x00,0x10,0x00,0x00,0x10,0x10,0x20},   //
        {0x00,0x00,0x04,0x08,0x10,0x08,0x04,0x00},   // <
        {0x00,0x00,0x00,0x3E,0x00,0x3E,0x00,0x00},   // =
        {0x00,0x00,0x10,0x08,0x04,0x08,0x10,0x00},   // >
        {0x00,0x3C,0x42,0x04,0x08,0x00,0x08,0x00},   // ?
        {0x00,0x3C,0x4A,0x56,0x5E,0x40,0x3C,0x00},   // @
        {0x00,0x3C,0x42,0x42,0x7E,0x42,0x42,0x00},   // A - Ascii 65
        {0x00,0x7C,0x42,0x7C,0x42,0x42,0x7C,0x00},   // B
        {0x00,0x3C,0x42,0x40,0x40,0x42,0x3C,0x00},   // C
        {0x00,0x78,0x44,0x42,0x42,0x44,0x78,0x00},   // D
        {0x00,0x7E,0x40,0x7C,0x40,0x40,0x7E,0x00},   // E
        {0x00,0x7E,0x40,0x7C,0x40,0x40,0x40,0x00},   // F
        {0x00,0x3C,0x42,0x40,0x4E,0x42,0x3C,0x00},   // G
        {0x00,0x42,0x42,0x7E,0x42,0x42,0x42,0x00},   // H
        {0x00,0x7C,0x10,0x10,0x10,0x10,0x7C,0x00},   // I
        {0x00,0x02,0x02,0x02,0x02,0x42,0x3C,0x00},   // J
        {0x00,0x44,0x48,0x70,0x48,0x44,0x42,0x00},   // K
        {0x00,0x40,0x40,0x40,0x40,0x40,0x7E,0x00},   // L
        {0x00,0x42,0x66,0x5A,0x42,0x42,0x42,0x00},   // M
        {0x00,0x42,0x62,0x52,0x4A,0x46,0x42,0x00},   // N
        {0x00,0x3C,0x42,0x42,0x42,0x42,0x3C,0x00},   // O
        {0x00,0x7C,0x42,0x42,0x7C,0x40,0x40,0x00},   // P
        {0x00,0x3C,0x42,0x42,0x52,0x4A,0x3C,0x00},   // Q
        {0x00,0x7C,0x42,0x42,0x7C,0x44,0x42,0x00},   // R
        {0x00,0x3C,0x40,0x3C,0x02,0x42,0x3C,0x00},   // S
        {0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x00},   // T
        {0x00,0x42,0x42,0x42,0x42,0x42,0x3C,0x00},   // U
        {0x00,0x42,0x42,0x42,0x42,0x24,0x18,0x00},   // V
        {0x00,0x42,0x42,0x42,0x42,0x5A,0x24,0x00},   // W
        {0x00,0x42,0x24,0x18,0x18,0x24,0x42,0x00},   // X
        {0x00,0x44,0x28,0x10,0x10,0x10,0x10,0x00},   // Y
        {0x00,0x7E,0x04,0x08,0x10,0x20,0x7E,0x00},   // Z - Ascii 90
        {0x00,0x0E,0x08,0x08,0x08,0x08,0x0E,0x00},   // [
        {0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x00},   // \
        {0x00,0x70,0x10,0x10,0x10,0x10,0x70,0x00},   // ]
        {0x00,0x10,0x38,0x54,0x10,0x10,0x10,0x00},   // ^
        {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF},   // _
        {0x00,0x1C,0x22,0x78,0x20,0x20,0x7E,0x00},   // £
        {0x00,0x00,0x38,0x04,0x3C,0x44,0x3C,0x00},   // a - Ascii 97
        {0x00,0x40,0x40,0x78,0x44,0x44,0x78,0x00},   // b
        {0x00,0x00,0x38,0x40,0x40,0x40,0x38,0x00},   // c
        {0x00,0x04,0x04,0x3C,0x44,0x44,0x3C,0x00},   // d
        {0x00,0x00,0x38,0x44,0x78,0x40,0x3C,0x00},   // e
        {0x00,0x30,0x40,0x60,0x40,0x40,0x40,0x00},   // f
        {0x00,0x3C,0x44,0x44,0x3C,0x04,0x38,0x00},   // g
        {0x00,0x40,0x40,0x40,0x78,0x44,0x44,0x00},   // h
        {0x00,0x20,0x00,0x60,0x20,0x20,0x70,0x00},   // i
        {0x00,0x08,0x00,0x08,0x08,0x48,0x30,0x00},   // j
        {0x00,0x40,0x50,0x60,0x60,0x50,0x48,0x00},   // k
        {0x00,0x40,0x40,0x40,0x40,0x40,0x30,0x00},   // l
        {0x00,0x00,0x68,0x54,0x54,0x54,0x54,0x00},   // m
        {0x00,0x00,0x78,0x44,0x44,0x44,0x44,0x00},   // n
        {0x00,0x00,0x38,0x44,0x44,0x44,0x38,0x00},   // o
        {0x00,0x78,0x44,0x44,0x78,0x40,0x40,0x00},   // p
        {0x00,0x3C,0x44,0x44,0x3C,0x04,0x06,0x00},   // q
        {0x00,0x00,0x1C,0x20,0x20,0x20,0x20,0x00},   // r
        {0x00,0x00,0x38,0x40,0x38,0x04,0x78,0x00},   // s
        {0x00,0x20,0x70,0x20,0x20,0x20,0x18,0x00},   // t
        {0x00,0x00,0x44,0x44,0x44,0x44,0x38,0x00},   // u
        {0x00,0x00,0x44,0x44,0x28,0x28,0x10,0x00},   // v
        {0x00,0x00,0x44,0x54,0x54,0x54,0x28,0x00},   // w
        {0x00,0x00,0x44,0x28,0x10,0x28,0x44,0x00},   // x
        {0x00,0x00,0x44,0x44,0x3C,0x04,0x38,0x00},   // y
        {0x00,0x00,0x7C,0x08,0x10,0x20,0x7C,0x00},   // z - Ascii 122
        {0x00,0x0E,0x08,0x30,0x08,0x08,0x0E,0x00},   // {
        {0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x00},   // |
        {0x00,0x70,0x10,0x0C,0x10,0x10,0x70,0x00},   // }
        {0x00,0x14,0x28,0x00,0x00,0x00,0x00,0x00},   // ~
        {0x3C,0x42,0x99,0xA1,0xA1,0x99,0x42,0x3C},   // © - Ascii 127
        {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},   // Block Graphic 1
        {0x0F,0x0F,0x0F,0x0F,0xFF,0xFF,0xFF,0xFF},
        {0xF0,0xF0,0xF0,0xF0,0xFF,0xFF,0xFF,0xFF},
        {0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF},
        {0xFF,0xFF,0xFF,0xFF,0x0F,0x0F,0x0F,0x0F},
        {0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F},
        {0xF0,0xF0,0xF0,0xF0,0x0F,0x0F,0x0F,0x0F},
        {0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F},
        {0xFF,0xFF,0xFF,0xFF,0x55,0xAA,0x55,0xAA},
        {0xAA,0x55,0xAA,0x55,0xFF,0xFF,0xFF,0xFF},
        {0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55},   // Block Graphic 11
      };
  
      // Pin definition
      int Matrix_pinCLK = -1; // Set to invalid value
      int Matrix_pinCS  = -1; // Set to invalid value
      int Matrix_pinDIN = -1; // Set to invalid value
        
      int Matrix_Text_Update_Period    = 30; // Default Text Periodic Udpate in ms
      unsigned long lastUpdatePeriodMs = 0;
      
      String textToDisplayStr;
      int    displayColumn = 0;
      int    numberOfLoop  = -1; // -1 means infinite loop
      int    defaultTextIntensity = 10;

      void write_Matrix_byte(unsigned char DATA) ;
      void write_Matrix(unsigned char address,unsigned char dat);
      void initializeMatrix(void);
      int getMatrixCharEntry(char c);
      unsigned char getLineToDisplay(int column, int line);
        
    public:
    
      MatrixTextScrollerClass(int clk, int cs, int din);
      void setIntensity(int intensity);
      void cleanMatrix();
      void setTextUpdatePeriod(int period);
      void refresh();
      void setTextToDisplay(String textStr);                           // To set the text to display
      void setTextToDisplayWithLoopNumber(String textStr, int nbLoop); // To set the text to display and the number of scrowling loop (-1 means infinite loop)

};

#endif
